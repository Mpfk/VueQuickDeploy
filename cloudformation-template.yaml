AWSTemplateFormatVersion: '2010-09-09'
Description: Template to set up CodePipeline for deploying a Vue app to Amazon S3 and CloudFront.

Parameters:
  Workload:
    Type: String
    Description: The name of the workload being deployed, for tagging and naming. (i.e. MyApp)
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: "Only lowercase alphanumeric and hyphens are allowed."
  Environment:
    Type: String
    Description: The environment type being deployed, for tagging. (i.e, dev, test, prod)
    Default: dev
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: "Only lowercase alphanumeric and hyphens are allowed."
  Deployer:
    Type: String
    Description: The user or tool deploying the resources, for tagging.
    Default: CloudFormation
  GitHubRepository:
    Type: String
    Description: The GitHub repository (owner/repo) to use for the pipeline.
  GitHubBranch:
    Type: String
    Description: The branch of the GitHub repository to use.
    Default: main
  GitHubConnectionArn:
    Type: String
    Description: The ARN of the CodeStar Connection for GitHub.
  PriceClass:
    Type: String
    Description: The price class for the CloudFront distribution.
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  CodeBuildImage:
    Type: String
    Description: "The Docker image used in CodeBuild."
    Default: "aws/codebuild/standard:7.0"

Resources:
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Workload}-${Environment}-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref GitHubRepository
                BranchName: !Ref GitHubBranch
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                BucketName: !Ref S3Bucket
                Extract: true
              RunOrder: 1
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: deployer
          Value: !Ref Deployer
        - Key: workload
          Value: !Ref Workload
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Workload}-${Environment}-${AWS::Region}-${AWS::StackName}-bucket
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteOldVersions
            Status: Enabled
            ExpirationInDays: 365
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: deployer
          Value: !Ref Deployer
        - Key: workload
          Value: !Ref Workload
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  EmptyS3BucketCustomResource:
    Type: Custom::EmptyS3Bucket
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketLambda.Arn
      BucketName: !Ref S3Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn: S3Bucket

  EmptyS3BucketLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt EmptyS3BucketLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info("Received event: %s", event)
              try:
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(event['ResourceProperties']['BucketName'])
                      logger.info("Deleting objects in bucket: %s", bucket.name)
                      bucket.objects.delete()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  logger.error("Error: %s", str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
      Runtime: python3.9
      Timeout: 300
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  EmptyS3BucketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EmptyS3BucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${S3Bucket}
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access identity for S3 bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: '*'
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: deployer
          Value: !Ref Deployer
        - Key: workload
          Value: !Ref Workload
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Workload}-${Environment}-build
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 5
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: deployer
          Value: !Ref Deployer
        - Key: workload
          Value: !Ref Workload
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Workload}-${Environment}-build:*
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: deployer
          Value: !Ref Deployer
        - Key: workload
          Value: !Ref Workload
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: !Ref PriceClass
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: deployer
          Value: !Ref Deployer
        - Key: workload
          Value: !Ref Workload
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

Outputs:
  CloudFrontDistributionUrl:
    Description: "URL of the CloudFront distribution"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDistributionUrl"
